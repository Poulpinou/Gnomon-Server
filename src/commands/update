#!/bin/bash
set -e

# [----- INITIALIZE VARIABLES -----]
# [ Pathes ]
# This script's absolute path
SCRIPT_PATH=`realpath $0`

# The absolute command's folder path
COMMANDS_PATH=$(dirname $SCRIPT_PATH)

# The absolute root folder path
ROOT_PATH=$(dirname $COMMANDS_PATH)

# [ Command ]
# The name of this command
COMMAND_NAME="${0##*/}"

# Every possible options for this command
COMMAND_SHORT_OPTIONS="hviaq"
COMMAND_LONG_OPTIONS="help,verbose,ignore,all,quiet"


# [----- LOAD CONFIG AND UTILITIES -----]
. $ROOT_PATH/.gns-config
. $ROOT_PATH/utilities/messages.sh
. $ROOT_PATH/utilities/containers.sh
. $ROOT_PATH/utilities/stepper.sh


# [----- FUNCTIONS -----]
# Displays the help for this command
showHelp(){
    # Show command's description
    echo -e "${s_bold}[Description]${s_normal} \n"
    showDescription

    # Show command's help
    cat << HELP
${s_bold}[Usage]${s_normal} 
    $ ${s_success}gns ${COMMAND_NAME} [-${COMMAND_SHORT_OPTIONS/[?]}] [--${COMMAND_LONG_OPTIONS//[,]/ --}]${s_normal}
        => the container to update will be the active directory
            or
    $ ${s_success}gns ${COMMAND_NAME} <container-path> [-${COMMAND_SHORT_OPTIONS/[?]}] [--${COMMAND_LONG_OPTIONS//[,]/ --}]${s_normal}
        => provides the path to the container to updates

    ${s_bold}[General Options]${s_normal}
    -h --help        ${s_bold}Help :${s_normal} Displays command's help
    -v --verbose     ${s_bold}Verbose Mode :${s_normal} Enables verbose mode. More detailed logs will be displayed.
    -i --ignore      ${s_bold}Ignore :${s_normal} Ignores every question and gives default answer

    ${s_bold}[Specific Options]${s_normal}
    -a --all    ${s_bold}Update all :${s_normal} If this option is provided, every Gnomon Container will be updated
    -q --quiet  ${s_bold}Quiet mode :${s_normal} If provided, no message will be printed during update
HELP
}

# Displays this command's description
showDescription(){
cat << DESCRIPTION
${s_title}${COMMAND_NAME}${s_normal}
    Use this command to update a Gnomon Repository. It will download the newest
    available version of the every declared repository and check if everything 
    is fine.

DESCRIPTION
}

# Updates the provided container
#   $1 (req) : container's path
updateContainer(){
    # Get arguments
    local path=$1

    # Get gnomonfile
    getGnomonfile $path 2
    [[ -z $gnomonfile ]] && logWarning "Update aborted" && return
    ((verbose)) && logInfo "gnomonfile sucessfully loaded"

    # Start Update
    ((quiet)) || echo -e "${s_title}[ âŸ³ Start Updating $path ]${s_normal}"

    # Load repositories
    for repository_key in $(jq '.repositories | keys | .[]' $gnomonfile)
    do
        # Change directory
        cd $path
        ((verbose)) && logInfo "Directory changed to $PWD"

        # Load repository data
        repository_data=$(jq -rc ".repositories[$repository_key]" $gnomonfile)

        # Update repository
        updateRepository "$repository_data"
    done
}

# Updates the provided repository
#   $1 (req) : repository's datas
updateRepository(){
    # Get arguments
    local datas=$1
    local step=0
    local name=$(echo "$datas" | jq -r '.name')
    local remote=$(echo "$datas" | jq -r '.git.remote')
    local branch=$(echo "$datas" | jq -r '.git.branch')

    # Start Update
    ((quiet)) || echo -e "\n${s_title}[ Update Repository : $name ]${s_normal}"

    # Check if directory exists
    ((verbose)) && logInfo "Checking if $name directory exists..."
    if [ -d $name ]
    then
        ((verbose)) && logInfo "$name directory found"

        # Change directory
        cd $name
        ((verbose)) && logInfo "Directory changed to $PWD"

        # Update remote
        ((quiet)) || newStep "Updating remote"
        git remote update ||  (logWarning "Update aborted" && return)
        ((quiet)) || logSuccess "- Success : Remote updated"

        # Check state
        ((quiet)) || newStep "Check state"
        UPSTREAM=${origin:-'@{u}'}
        LOCAL=$(git rev-parse @)
        REMOTE=$(git rev-parse "$UPSTREAM")
        BASE=$(git merge-base @ "$UPSTREAM")

        if [ $LOCAL = $REMOTE ]; then
            echo "$name is up to date"
            ((quiet)) || logSuccess "- Success : State Checked"
        elif [ $LOCAL = $BASE ]; then
            echo "$name can be updated"
            ((quiet)) || logSuccess "- Success : State Checked"
            ((quiet)) || newStep "Pull Repository"
            (git pull \
                && ((quiet)) || logSuccess "- Success : State Checked") \
            || exitIfError 1 "Aborting"

        elif [ $REMOTE = $BASE ]; then
            exitIfError 1 "$name has local changed, push them or stash them. Aborting"
        else
            exitIfError 1 "$name diverged. Aborting"
        fi
        
    else
        ((verbose)) && logInfo "$name directory not found"

        # Clone repository
        ((quiet)) || echo -e "${s_bold}Step $(step=$((step+1)) && echo $step) : ${s_normal} Clone repository"
        git clone $remote -b $branch $PWD/$name || exitIfError 1 "Update aborted"
        ((quiet)) || logSuccess "- Success : $name directory created from $remote"

        # Change directory
        cd $name
        ((verbose)) && logInfo "Directory changed to $PWD"
    fi 
}


# [----- LOAD ARGUMENTS AND OPTIONS -----]
# Get the container path
if [ -z $1 ] || [[ $1 == -* ]]
then
    container_path="$PWD"
else
    container_path="$1"
    shift
fi
container_path=${container_path/[~]/"/home/${USER}"}

# Prepare options
COMMAND_OPTIONS=`getopt -o $COMMAND_SHORT_OPTIONS --long $COMMAND_LONG_OPTIONS -n 'javawrap' -- "$@"` \
    || (
        showHelp
        exit 1
    )
eval set -- "$COMMAND_OPTIONS"

# Set default values
verbose=0
ignore=0
all=0
quiet=0

# Iterate on options
while true; do
    case "$1" in  
    -h | --help) showHelp; exit 0; shift;;
    -v | --verbose) verbose=1; logInfo "Verbose mode enabled"; shift;;
    -i | --ignore) ignore=1; shift;;
    -a | --all) all=1; shift;;
    -q | --quiet) quiet=1 shift;;
    --) shift; break;;    
    *) break;;
    esac
done


# [----- EXECUTION -----]

# [Check containers to update]
if [ $all = 1 ]
then
    ((verbose)) && logInfo "Updating all containers..."
    for container in $(jq -rc '.containers[].path' $ROOT_PATH/data/containers.json)
    do
        updateContainer $container
    done
else
    ((verbose)) && logInfo "$container_path selected for update"
    updateContainer $container_path
fi


logSuccess "$COMMAND_NAME executed"