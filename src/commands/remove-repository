#!/bin/bash
set -e

# [----- INITIALIZE VARIABLES -----]
# [ Pathes ]
# This script's absolute path
SCRIPT_PATH=`realpath $0`

# The absolute command's folder path
COMMANDS_PATH=$(dirname $SCRIPT_PATH)

# The absolute root folder path
ROOT_PATH=$(dirname $COMMANDS_PATH)

# [ Command ]
# The name of this command
COMMAND_NAME="${0##*/}"

# Every possible options for this command
COMMAND_SHORT_OPTIONS="hvic:"
COMMAND_LONG_OPTIONS="help,verbose,ignore,container"

# [----- LOAD CONFIG AND UTILITIES -----]
. $ROOT_PATH/.gns-config
. $ROOT_PATH/utilities/messages.sh
. $ROOT_PATH/utilities/containers.sh


# [----- FUNCTIONS -----]
# Displays the help for this command
showHelp(){
# Show command's description
    echo -e "${s_bold}[Description]${s_normal} \n"
    showDescription

    # Load archetype names
    local archetypes=$(ls $ROOT_PATH/templates/commands | xargs | sed 's/.json//g')

    # Show command's help
    cat << HELP
${s_bold}[Usage]${s_normal} 
    $ ${s_success}gns <repository-name> ${COMMAND_NAME} [-${COMMAND_SHORT_OPTIONS/[?]}] [--${COMMAND_LONG_OPTIONS//[,]/ --}]${s_normal}
        => Where repository-name is the name of the repository you want to delete

    ${s_bold}[General Options]${s_normal}
    -h --help       ${s_bold}Help :${s_normal} Displays command's help
    -v --verbose    ${s_bold}Verbose Mode :${s_normal} Enables verbose mode. More detailed logs will be displayed.
    -i --ignore     ${s_bold}Ignore :${s_normal} Ignores every question and gives default answer

    ${s_bold}[Input Options]${s_normal}
    -c --container [container]  ${s_bold}Container :${s_normal} Sets the targeted Gnomon Container path (default: current directory)
HELP
}

# Displays this command's description
showDescription(){
cat << DESCRIPTION
${s_title}${COMMAND_NAME}${s_normal}
    Use this command to remove a git repository from a Gnomon Container

DESCRIPTION
}


# [----- LOAD ARGUMENTS AND OPTIONS -----]
# Get repository name
[[ -n $1 ]] || exitIfError $? "This command requires a repository name or an option"

if [[ ! $1 == -* ]]
then
    repository_name="$1"
    shift
fi

# Prepare options
COMMAND_OPTIONS=`getopt -o $COMMAND_SHORT_OPTIONS --long $COMMAND_LONG_OPTIONS -n 'javawrap' -- "$@"` \
    || (
        showHelp
        exit 1
    )
eval set -- "$COMMAND_OPTIONS"

# Set default values
verbose=0
ignore=0
container_path="$PWD"

# Iterate on options
while true; do
    case "$1" in 
    -h | --help) showHelp; exit 0; shift;;
    -v | --verbose) verbose=1; logInfo "Verbose mode enabled"; shift;;
    -i | --ignore) ignore=1; shift;;
    -c | --container) container_path="$2"; shift 2;;
    --) shift; break;;    
    *) break;;
    esac
done


# [----- EXECUTION -----]
# [Get gnomonfile]
((verbose)) && logInfo "Getting the .gnomonfile..."
getGnomonfile $container_path 1
((verbose)) && logInfo ".gnomonfile loaded"

# [Check if repository exists]
((verbose)) && logInfo "Checking if repository exists..."
jq -e --arg name "$repository_name" '.repositories | map(.name == $name) | any' $gnomonfile > /dev/null \
    || exitIfError 1 "$repository_name doesn't exist in this container"
((verbose)) && logInfo "$repository_name found"

# [Ask validation]
if ((ignore))  
then
    ((verbose)) && logInfo "Ignoring validation message"
else
    ((verbose)) && logInfo "Asking for validation"
    while true
    do
        read -p "Are you sure you want to remove $repository_name from this container? (y/n)" yn
        case $yn in
        [Yy]* )
            ((verbose)) && logInfo "Approved removal"
            break;;
        [Nn]* ) 
            logWarning "Removal cancelled"
            exit 0
            ;;
        * ) echo "Invalid input, please answer yes or no.";;
    esac
    done
fi

# [Remove repository]
# Create tmp file
tmp=$(mktemp /tmp/gns_gnomonfile_XXXX.tmp)
cat $gnomonfile >> $tmp

# Remove repository from gnomonfile
((verbose)) && logInfo "Removing $repository_name from gnomonfile..."
jq --arg name "$repository_name" 'del(.repositories[] | select(.name == $name))' $gnomonfile > $tmp

# Apply tmp file
mv -f $tmp $gnomonfile
((verbose)) && logInfo "$repository_name removed from gnomonfile"


# [Log success and what's next]
logSuccess "$repository_name successfully removed from gnomonfile!"
cat << WHATNEXT

Now you can :
    $ ${s_success}gns update ${s_normal}to update your container and remove the deleted repository from the container folder 
    or
    $ ${s_success}gns add-repository <remote> ${s_normal}to add a new repository
WHATNEXT

exit 0
