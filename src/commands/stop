#!/bin/bash

# [----- INITIALIZE VARIABLES -----]
# [ Pathes ]
# This script's absolute path
SCRIPT_PATH=`realpath $0`

# The absolute command's folder path
COMMANDS_PATH=$(dirname $SCRIPT_PATH)

# The absolute root folder path
ROOT_PATH=$(dirname $COMMANDS_PATH)

# [ Command ]
# The name of this command
COMMAND_NAME="${0##*/}"

# Every possible options for this command
COMMAND_SHORT_OPTIONS="hviaq"
COMMAND_LONG_OPTIONS="help,verbose,ignore,all,quiet"


# [----- LOAD CONFIG AND UTILITIES -----]
. $ROOT_PATH/.gns-config
. $ROOT_PATH/utilities/messages.sh
. $ROOT_PATH/utilities/containers.sh


# [----- FUNCTIONS -----]
# Displays the help for this command
showHelp(){
    # Show command's description
    echo -e "${s_bold}[Description]${s_normal} \n"
    showDescription

    # Show command's help
    cat << HELP
${s_bold}[Usage]${s_normal} 
    $ ${s_success}gns ${COMMAND_NAME} [-${COMMAND_SHORT_OPTIONS/[?]}] [--${COMMAND_LONG_OPTIONS//[,]/ --}]${s_normal}
        => the container to stop will be the active directory
            or
    $ ${s_success}gns ${COMMAND_NAME} <container-path> [-${COMMAND_SHORT_OPTIONS/[?]}] [--${COMMAND_LONG_OPTIONS//[,]/ --}]${s_normal}
        => provides the path to the container to stop

    ${s_bold}[General Options]${s_normal}
    -h --help        ${s_bold}Help :${s_normal} Displays command's help
    -v --verbose     ${s_bold}Verbose Mode :${s_normal} Enables verbose mode. More detailed logs will be displayed.
    -i --ignore      ${s_bold}Ignore :${s_normal} Ignores every question and gives default answer

    ${s_bold}[Specific Options]${s_normal}
    -a --all        ${s_bold}All :${s_normal} If this option is provided, every Gnomon Container will be stopped
    -q --quiet      ${s_bold}Quiet mode :${s_normal} If provided, no message will be printed during update
HELP
}

# Displays this command's description
showDescription(){
cat << DESCRIPTION
${s_title}${COMMAND_NAME}${s_normal}
    Use this command to stop one or many a Gnomon Container.

DESCRIPTION
}

# Stopss the provided container
#   $1 (req) : container's path
stopContainer(){
    # Get arguments
    local path=$1

    # Start container
    ((quiet)) || echo -e "\n${s_title}=> â¤· Stoping $path <=${s_normal}"
    
    # Get gnomonfile
    getGnomonfile $path 2 || (logWarning "Aborting..." && return 1)
    ((verbose)) && logInfo "gnomonfile sucessfully loaded"

    #Create a temp version for iteration (=> changing data breaks the loop)
    gnomonfile_temp=`cat $gnomonfile`

    # Load repositories
    for repository_key in $(echo "$gnomonfile_temp" | jq '.repositories | keys | .[]')
    do
        # Change directory
        cd $path
        ((verbose)) && logInfo "Directory changed to $PWD"

        # Load repository data
        repository_data=$(echo "$gnomonfile_temp" | jq -rc ".repositories[$repository_key]")

        # Stop repository
        stopRepository "$repository_data" 
    done
}

# Stops the provided repository
#   $1 (req) : repository's datas
stopRepository(){
    # Get arguments
    local datas=$1
    local name=$(echo "$datas" | jq -r '.name')
    local stop_command=$(echo "$datas" | jq -r '.commands.stop')

    # Stop repository
    ((quiet)) || echo -e "\n${s_title}[ Stop Repository : $name ]${s_normal}"

    # Change directory
    cd $name || return 1
    ((verbose)) && logInfo "Directory changed to $PWD"

    # Check command
    ((verbose)) && logInfo "Checking stop command..."
    [[ -z $stop_command ]] && (logError "No stop command found for $name repository. Aborted." && return 1)
    ((verbose)) && logInfo "Command provided"

    # Execute command
    eval $stop_command || ( logError "Stop command '$stop_command' failed for $name. Aborting." && return 1)

    return 0
}

# [----- LOAD ARGUMENTS AND OPTIONS -----]
# Get the container path
if [ -z $1 ] || [[ $1 == -* ]]
then
    container_path="$PWD"
else
    container_path="$1"
    shift
fi
container_path=${container_path/[~]/"/home/${USER}"}

# Prepare options
COMMAND_OPTIONS=`getopt -o $COMMAND_SHORT_OPTIONS --long $COMMAND_LONG_OPTIONS -n 'javawrap' -- "$@"` \
    || (
        showHelp
        exit 1
    )
eval set -- "$COMMAND_OPTIONS"

# Set default values
verbose=0
ignore=0
all=0
quiet=0

# Iterate on options
while true; do
    case "$1" in  
    -h | --help) showHelp; exit 0; shift;;
    -v | --verbose) verbose=1; logInfo "Verbose mode enabled"; shift;;
    -i | --ignore) ignore=1; shift;;
    -a | --all) all=1; shift;;
    -q | --quiet) quiet=1; shift;;
    --) shift; break;;    
    *) break;;
    esac
done


# [----- EXECUTION -----]
# [Check if 'all' has been provided]
if [ $all = 1 ]
then
    ((verbose)) && logInfo "Stoping all containers..."
    for container in $(jq -rc '.containers[].path' $ROOT_PATH/data/containers.json)
    do
        stopContainer $container
    done
else
    ((verbose)) && logInfo "$container_path is stoping..."
    stopContainer $container_path
fi